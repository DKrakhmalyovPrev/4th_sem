#include <iostream>
#include <thread>
#include <vector>
#include <mutex>
#include <atomic>

std::mutex mut;
std::recursive_mutex recMut;


void recursiveFunc(int depth)
{
	std::unique_lock<std::recursive_mutex> guard(recMut, std::defer_lock_t());
	while (!guard.try_lock())
	{
		//do sth;
	}
//	std::lock_guard<std::recursive_mutex> guard(recMut);
//	recMut.lock();
	std::cout << " depth" << depth;
	if (depth >0)
		recursiveFunc(depth - 1);
//	recMut.unlock();

}
class CMyLock{
public:
	CMyLock() 
	{
		ticketCounter.store(0); 
		tableu.store(0);
	};
	void lock()
	{ 
		int ticket = ticketCounter++; 
		while (ticket != tableu.load())
		{
			std::this_thread::yield();
		}
	}
	void unlock()
	{ 
		tableu++; 
	}

private:
	std::atomic_int ticketCounter;
	std::atomic_int tableu;
};

std:: atomic<int> j(0);
std:: atomic_flag flag;
std::atomic<bool> atomBool;
std::atomic_bool atomBool2;

void func()
{
	
//	j.is_lock_free();
	for (int i = 0; i < 100000; i++)
		j.fetch_add(1);
}	


int main()
{

	std::vector< std::thread > threads;
	for (int i = 0; i < 2; i++)
	{
		threads.emplace_back(func);
	}

	for (int i = 0; i < threads.size(); i++)
	{
		threads[i].join();
	}

	std::cout << j.load();
//	std::thread obj(func);
//	obj.detach(); // Поток не генерит исключения, уходит в свободное плавание
	//obj.join(); //Прерывает поток, пока текущий не завершится

	return 0;
}
